import { GoogleGenAI } from "@google/genai";
import fs from "fs";
import path from "path";

/**
 * Shared GoogleGenAI client (reads API key from environment variables).
 * Make sure to set:  GOOGLE_API_KEY=your_api_key_here
 */
const ai = new GoogleGenAI({
  apiKey: process.env.GOOGLE_API_KEY as string,
});

/**
 * Generates AI images using Google Imagen and saves them to disk.
 *
 * @param prompt        Text prompt describing the image to generate.
 * @param numberOfImages Number of images to generate (default: 1).
 * @param outputDir      Directory where images will be saved (default: "./generated-images").
 * @returns              Array of saved image file paths.
 */
export async function generateAIImages(
  prompt: string,
  numberOfImages: number = 1,
  outputDir: string = "./generated-images"
): Promise<string[]> {
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const response = await ai.models.generateImages({
    model: "imagen-4.0-generate-001",
    prompt,
    config: { numberOfImages },
  });

  if (!response.generatedImages?.length) {
    throw new Error("No images were generated by the API.");
  }

  const savedFiles: string[] = [];
  let idx = 1;

  for (const generatedImage of response.generatedImages) {
    if (!generatedImage.image?.imageBytes) continue;

    const buffer = Buffer.from(generatedImage.image.imageBytes, "base64");
    const filePath = path.join(outputDir, `imagen-${Date.now()}-${idx}.png`);
    fs.writeFileSync(filePath, buffer);
    savedFiles.push(filePath);
    idx++;
  }

  return savedFiles;
}

/**
 * Generates a video using Google Veo and saves it to disk.
 *
 * @param prompt       Text prompt describing the desired video.
 * @param outputFile   Path where the generated video will be saved.
 * @param pollInterval How often to poll the API for completion (ms, default 10s).
 * @returns            Path to the saved video file.
 */
export async function generateAIVideo(
  prompt: string,
  outputFile: string = "./generated-videos/dialogue_example.mp4",
  pollInterval: number = 10_000
): Promise<string> {
  const outputDir = path.dirname(outputFile);
  if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });

  // Start the video generation
  let operation = await ai.models.generateVideos({
    model: "veo-3.0-generate-001",
    prompt,
  });

  // Poll until generation completes
  while (!operation.done) {
    console.log("Waiting for video generation to complete...");
    await new Promise((resolve) => setTimeout(resolve, pollInterval));

    // âœ… Wrap the operation object as required by TypeScript
    operation = await ai.operations.get({ operation });
  }

  if (!operation.response?.generatedVideos?.length) {
    throw new Error("No video was generated by the API.");
  }

  const videoFile = operation.response.generatedVideos[0].video;
  if (!videoFile?.uri) throw new Error("Generated video URI not found.");

  // Download video using its public URI
  const res = await fetch(videoFile.uri);
  if (!res.ok) throw new Error(`Failed to download video: ${res.statusText}`);
  const buffer = Buffer.from(await res.arrayBuffer());
  fs.writeFileSync(outputFile, buffer);

  console.log(`Generated video saved to ${outputFile}`);
  return outputFile;
}

